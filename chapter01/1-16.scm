(define (fast-expt b n)
  (define (even? n)
    (= (remainder n 2) 0))
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define (fast-expt-iter base n)
  (define (even? n)
    (= (remainder n 2) 0))
  (define (iter base counter product)
    (cond ((= counter 0) product)
          ((even? counter) (iter (* base base) (/ counter 2) product))
          (else (iter base (- counter 1) (* product base)))))
  (iter base n 1))
